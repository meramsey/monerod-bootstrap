#!/usr/bin/env bash

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_SINGLE([action],[Action to perform. install or upgrade (optional)],[install])
# ARG_OPTIONAL_SINGLE([profile],[p],[Monerod RPC profile type.  (optional)],[monerod_public_restricted_pruned])
# ARG_HELP([Monerod Easy Install Script for setting up remote node.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_action="install"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_profile="monerod_public_restricted_pruned"


print_help()
{
	printf '%s\n' "Monerod Easy Install Script for setting up remote node."
	printf 'Usage: %s [-p|--profile <arg>] [-h|--help] [<action>]\n' "$0"
	printf '\t%s\n' "<action>: Action to perform. install or upgrade (optional) (default: 'install')"
	printf '\t%s\n' "-p, --profile: Monerod RPC profile type.  (optional) (default: 'monerod_public_restricted_pruned')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--profile)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_profile="$2"
				shift
				;;
			--profile=*)
				_arg_profile="${_key##--profile=}"
				;;
			-p*)
				_arg_profile="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_action "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ARG_VERSION([echo $0 v0.1])


# vvv  PLACE YOUR CODE HERE  vvv
# For example:
# printf 'Value of --%s: %s\n' 'action' "$_arg_action"
# printf 'Value of --%s: %s\n' 'profile' "$_arg_profile"

# https://sethforprivacy.com/guides/run-a-monero-node-advanced/#download-and-install-monerod

function install_prereqs(){
	sudo apt-get update && sudo apt-get upgrade -y
	sudo apt-get install -y ufw gpg wget
}

function setup_ufw(){
	# Deny all non-explicitly allowed ports
	sudo ufw default deny incoming
	sudo ufw default allow outgoing

	# Allow SSH access
	sudo ufw allow ssh

	# Allow monerod p2p port
	sudo ufw allow 18080/tcp

	# Allow monerod restricted RPC port
	sudo ufw allow 18089/tcp

	# Enable UFW
	sudo ufw enable
}

function setup_monero_user_files(){
	# Create a system user and group to run monerod as
	sudo addgroup --system monero
	sudo adduser --system monero --home /var/lib/monero

	# Create necessary directories for monerod
	sudo mkdir /var/run/monero
	sudo mkdir /var/log/monero
	sudo mkdir /etc/monero

	# Create monerod config file
	sudo touch /etc/monero/monerod.conf

	# Set permissions for new directories
	sudo chown monero:monero /var/run/monero
	sudo chown monero:monero /var/log/monero
	sudo chown -R monero:monero /etc/monero
}

function download_install_verify_binaryfate(){
	# Download binaryfate's GPG key
	wget -q -O binaryfate.asc https://raw.githubusercontent.com/monero-project/monero/master/utils/gpg_keys/binaryfate.asc

	# Verify binaryfate's GPG key
	echo "1. Verify binaryfate's GPG key: "
	gpg --keyid-format long --with-fingerprint binaryfate.asc

	# Prompt user to confirm the key matches that posted on https://src.getmonero.org/resources/user-guides/verification-allos-advanced.html
	echo
	read -p "Does the above output match https://src.getmonero.org/resources/user-guides/verification-allos-advanced.html?" -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
			# Import binaryfate's GPG key
			echo
			echo "----------------------------"
			echo "2. Import binaryfate's GPG key"
			gpg --import binaryfate.asc
	fi
}

function remove_stale_downloads(){
	# Delete stale .bz2 Monero downloads
	rm -f monero-linux-x64-*.tar.bz2
	rm -rf monero-x86_64-linux-gnu-*
}

function download_verify_hashes(){
	# Download hashes.txt
	wget -q -O hashes.txt https://getmonero.org/downloads/hashes.txt

	# Verify hashes.txt
	echo
	echo "--------------------"
	echo "3. Verify hashes.txt"
	gpg --verify hashes.txt
}

function download_latest_binaries(){
	# Download latest 64-bit binaries
	echo
	echo "-------------------------------------"
	echo "4. Download latest Linux binaries"
	echo "Downloading..."
	wget -q --content-disposition https://downloads.getmonero.org/cli/linux64
}

function verify_downloaded_binaries(){
	# Verify shasum of downloaded binaries
	echo
	echo "---------------------------------------"
	echo "5. Verify hashes of downloaded binaries"
	if shasum -a 256 -c hashes.txt -s 2>&1 | grep -v 'No such file or directory'
	then
			echo
			echo "Success: The downloaded binaries verified properly!"
	else
			echo
			echo -e "\e[31mDANGER: The download binaries have been tampered with or corrupted\e[0m"
			rm -rf monero-linux-x64-*.tar.bz2
			exit 1
	fi
}

function install_monero_binaries(){
	tar xvf monero-linux-*.tar.bz2
	rm monero-linux-*.tar.bz2
	sudo cp -r monero-x86_64-linux-gnu-*/* /usr/local/bin/
	sudo chown -R monero:monero /usr/local/bin/monero*
}

function download_monerod_systemd(){
	wget -O /etc/systemd/system/monerod.service https://raw.githubusercontent.com/meramsey/monerod-bootstrap/main/configs/monerod.service
}

function download_monerod_config(){
	local configversion
	configversion=$1
	wget -O /etc/monero/monerod.conf https://raw.githubusercontent.com/meramsey/monerod-bootstrap/main/configs/"${configversion}".conf
	
}


function enable_start_monerod(){
	# Load the new systemd script for monerod
	sudo systemctl daemon-reload

	# Set monerod to start on boot
	sudo systemctl enable monerod

	# Start the monerod service
	sudo systemctl start monerod
}

function update_existing_monerod(){
	echo 'Updating existing Monerod'
	remove_stale_downloads
	download_verify_hashes
	download_latest_binaries
	verify_downloaded_binaries
	sudo systemctl stop monerod
	install_monero_binaries
	sudo systemctl start monerod
}

function check_hidden_service_info(){
	if [[ -f "/var/lib/tor/hidden_service/monero-rpc/hostname" ]]
	then
		onion_domain="$(sudo cat /var/lib/tor/hidden_service/monero-rpc/hostname)"
		echo "Hidden Service Active at: ${onion_domain}:18089"
		echo "Note: To test connectivity, simply visit http://${onion_domain}:18089/get_info and make sure you get a block of text back."
	fi
}

function show_remote_node_info(){
	IP=$(wget -qO- -t1 -T2 ipv4.icanhazip.com)
	echo "For wallet remote node please use $IP:18089"
	echo "View Status in browser via http://$IP:18089/get_info"
	check_hidden_service_info
}

function show_how_to_manage_service(){
	echo "==============================="
	echo "To enable, start,and check status of the systemd monerod service."
	echo "systemctl start monerod"
	echo "systemctl stop monerod"
	echo "systemctl restart monerod"
	echo "systemctl status monerod"
	echo "==============================="
}

function install_tor_onion(){
	# Install the Tor daemon
	sudo apt-get install tor

	# Enable Tor to start on boot
	sudo systemctl enable tor
	
	sudo mkdir /var/lib/tor/hidden_service
	sudo chown debian-tor:debian-tor /var/lib/tor/hidden_service
	
	# Add configuration lines to /etc/tor/torrc to enable the HiddenService for restricted RPC
	echo "## Tor Monero RPC HiddenService
	HiddenServiceDir /var/lib/tor/hidden_service/monero-rpc
	HiddenServicePort 18089 127.0.0.1:18089" | sudo tee -a /etc/tor/torrc
	sudo systemctl restart tor
}


function install_setup_monerod(){
	
	echo "Installing and setting up Monerod with profile: ${1}"
	install_prereqs
	setup_ufw
	setup_monero_user_files
	download_install_verify_binaryfate
	download_verify_hashes
	download_latest_binaries
	verify_downloaded_binaries
	install_monero_binaries
	download_monerod_systemd
	download_monerod_config "$1"
	enable_start_monerod
	install_tor_onion # maybe make this optional arg???
}

if [[ "$_arg_action" = "install" ]] ; then
	install_setup_monerod "${_arg_profile}"
	show_remote_node_info
	exit 0
elif [[ "$_arg_action" = "upgrade" ]] ; then
	update_existing_monerod
	show_remote_node_info
	exit 0
fi

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash